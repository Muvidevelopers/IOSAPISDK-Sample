// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import AVFoundation;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface AVPlayer (SWIFT_EXTENSION(MuviSDK))
/// 观看了的时长（不包括暂停等）
@property (nonatomic, readonly) NSTimeInterval durationWatched;
@end

@class UIPanGestureRecognizer;
@class BMPlayerLayerView;
@class BMPlayerControlView;
@class NSCoder;

SWIFT_CLASS("_TtC7MuviSDK8BMPlayer")
@interface BMPlayer : UIView
@property (nonatomic, copy) void (^ _Nullable backBlock)(BOOL);
/// Gesture to change volume / brightness
@property (nonatomic, strong) UIPanGestureRecognizer * _Null_unspecified panGesture;
/// AVLayerVideoGravityType
@property (nonatomic, copy) NSString * _Nonnull videoGravity;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, copy) void (^ _Nullable playTimeDidChange)(NSTimeInterval, NSTimeInterval);
@property (nonatomic, copy) void (^ _Nullable playStateDidChange)(BOOL);
@property (nonatomic, readonly, strong) AVPlayer * _Nullable avPlayer;
@property (nonatomic, strong) BMPlayerLayerView * _Nullable playerLayer;
/// Adjust the value of Pan to Seek
@property (nonatomic) double panToSeekRate;
@property (nonatomic, strong) BMPlayerControlView * _Null_unspecified controlView;
/// 用来保存时间状态
@property (nonatomic) NSTimeInterval sumTime;
@property (nonatomic) NSTimeInterval totalDuration;
@property (nonatomic) NSTimeInterval currentPosition;
@property (nonatomic) BOOL isPlayToTheEnd;
- (void)callBufferLog;
- (void)timerFunctions;
/// auto start playing, call at viewWillAppear, See more at pause
- (void)autoPlay;
/// Play
- (void)play;
/// Pause
/// \param allow should allow to response <code>autoPlay</code> function
///
- (void)pauseWithAllowAutoPlay:(BOOL)allow;
/// k
/// seek
/// \code
///  - parameter to: target time
///
/// \endcode
- (void)seek:(NSTimeInterval)to completion:(void (^ _Nullable)(void))completion;
/// update UI to fullScreen
- (void)updateUI:(BOOL)isFullScreen;
/// increade volume with step, default step 0.1
/// \param step step
///
- (void)addVolumeWithStep:(float)step;
/// decreace volume with step, default step 0.1
/// \param step step
///
- (void)reduceVolumeWithStep:(float)step;
/// prepare to dealloc player, call at View or Controllers deinit funciton.
- (void)prepareToDealloc;
- (void)forceReloadSubtile;
/// If you want to create BMPlayer with custom control in storyboard.
/// create a subclass and override this method.
/// <ul>
///   <li>
///     return: costom control which you want to use
///   </li>
/// </ul>
+ (BMPlayerControlView * _Nullable)storyBoardCustomControl SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCustomControllView:(BMPlayerControlView * _Nullable)customControllView;
- (nonnull instancetype)initWithCustomControlView:(BMPlayerControlView * _Nullable)customControlView OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)callVideoLogs:(NSString * _Nonnull)watch_status;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface BMPlayer (SWIFT_EXTENSION(MuviSDK))
@end


@interface BMPlayer (SWIFT_EXTENSION(MuviSDK))
- (void)bmPlayerWithPlayer:(BMPlayerLayerView * _Nonnull)player playerIsPlaying:(BOOL)playing;
- (void)bmPlayerWithPlayer:(BMPlayerLayerView * _Nonnull)player loadedTimeDidChange:(NSTimeInterval)loadedDuration totalDuration:(NSTimeInterval)totalDuration;
- (void)bmPlayerWithPlayer:(BMPlayerLayerView * _Nonnull)player playTimeDidChange:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
@end

@class UIButton;
@class UISlider;

SWIFT_PROTOCOL("_TtP7MuviSDK27BMPlayerControlViewDelegate_")
@protocol BMPlayerControlViewDelegate
/// call when control view choose a definition
/// \param controlView control view
///
/// \param index index of definition
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChooseDefition:(NSInteger)index;
/// call when control view pressed an button
/// \param controlView control view
///
/// \param button button type
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didPressButton:(UIButton * _Nonnull)button;
/// call when slider action trigged
/// \param controlView control view
///
/// \param slider progress slider
///
/// \param event action
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView slider:(UISlider * _Nonnull)slider onSliderEvent:(UIControlEvents)event;
@optional
/// call when needs to change playback rate
/// \param controlView control view
///
/// \param rate playback rate
///
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChangeVideoPlaybackRate:(float)rate;
@end


@interface BMPlayer (SWIFT_EXTENSION(MuviSDK)) <BMPlayerControlViewDelegate>
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChooseDefition:(NSInteger)index;
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didPressButton:(UIButton * _Nonnull)button;
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView slider:(UISlider * _Nonnull)slider onSliderEvent:(UIControlEvents)event;
- (void)controlViewWithControlView:(BMPlayerControlView * _Nonnull)controlView didChangeVideoPlaybackRate:(float)rate;
@end

@class UIImageView;
@class UILabel;
@class BMTimeSlider;
@class UIProgressView;
@class NVActivityIndicatorView;
@class UITapGestureRecognizer;

SWIFT_CLASS("_TtC7MuviSDK19BMPlayerControlView")
@interface BMPlayerControlView : UIView
@property (nonatomic, weak) id <BMPlayerControlViewDelegate> _Nullable delegate;
@property (nonatomic, weak) BMPlayer * _Nullable player;
@property (nonatomic) NSInteger selectedIndex;
@property (nonatomic) BOOL isFullscreen;
@property (nonatomic) BOOL isMaskShowing;
@property (nonatomic) BOOL ifSettingsNeeded;
@property (nonatomic) NSTimeInterval totalDuration;
/// main views which contains the topMaskView and bottom mask view
@property (nonatomic, strong) UIView * _Nonnull mainMaskView;
@property (nonatomic, strong) UIView * _Nonnull topMaskView;
@property (nonatomic, strong) UIView * _Nonnull bottomMaskView;
/// Image view to show video cover
@property (nonatomic, strong) UIImageView * _Nonnull maskImageView;
/// top views
@property (nonatomic, strong) UIButton * _Nonnull backButton;
@property (nonatomic, strong) UIButton * _Nonnull settingButton;
@property (nonatomic, strong) UIButton * _Nonnull airPlayButton;
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UIView * _Nonnull chooseDefitionView;
/// bottom view
@property (nonatomic, strong) UILabel * _Nonnull currentTimeLabel;
@property (nonatomic, strong) UILabel * _Nonnull totalTimeLabel;
/// Progress slider
@property (nonatomic, strong) BMTimeSlider * _Nonnull timeSlider;
/// load progress view
@property (nonatomic, strong) UIProgressView * _Nonnull progressView;
@property (nonatomic, strong) UIButton * _Nonnull playButton;
@property (nonatomic, strong) UIButton * _Nonnull fullscreenButton;
@property (nonatomic, strong) UILabel * _Nonnull subtitleLabel;
@property (nonatomic, strong) UIView * _Nonnull subtitleBackView;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable subtileAttrabute;
/// Activty Indector for loading
@property (nonatomic, strong) NVActivityIndicatorView * _Nonnull loadingIndector;
@property (nonatomic, strong) UIView * _Nonnull seekToView;
@property (nonatomic, strong) UIImageView * _Nonnull seekToViewImage;
@property (nonatomic, strong) UILabel * _Nonnull seekToLabel;
@property (nonatomic, strong) UIButton * _Nonnull replayButton;
/// Gesture used to show / hide control view
@property (nonatomic, strong) UITapGestureRecognizer * _Null_unspecified tapGesture;
- (void)playTimeDidChangeWithCurrentTime:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
/// call on load duration changed, update load progressView here
/// \param loadedDuration loaded duration
///
/// \param totalDuration total duration
///
- (void)loadedTimeDidChangeWithLoadedDuration:(NSTimeInterval)loadedDuration totalDuration:(NSTimeInterval)totalDuration;
/// Call when User use the slide to seek function
/// \param toSecound target time
///
/// \param totalDuration total duration of the video
///
/// \param isAdd isAdd
///
- (void)showSeekToViewTo:(NSTimeInterval)toSecound total:(NSTimeInterval)totalDuration isAdd:(BOOL)isAdd;
- (void)playStateDidChangeWithIsPlaying:(BOOL)isPlaying;
/// auto fade out controll view with animtion
- (void)autoFadeOutControlViewWithAnimation;
/// cancel auto fade out controll view with animtion
- (void)cancelAutoFadeOutAnimation;
/// Implement of the control view animation, override if need’s custom animation
/// \param isShow is to show the controlview
///
- (void)controlViewAnimationWithIsShow:(BOOL)isShow;
/// Implement of the UI update when screen orient changed
/// \param isForFullScreen is for full screen
///
- (void)updateUI:(BOOL)isForFullScreen;
/// Call when video play’s to the end, override if you need custom UI or animation when played to the end
- (void)showPlayToTheEndView;
- (void)hidePlayToTheEndView;
- (void)showLoader;
- (void)hideLoader;
- (void)hideSeekToView;
- (void)showCoverWithLink:(NSString * _Nonnull)cover;
- (void)showCoverWithUrl:(NSURL * _Nullable)url;
- (void)hideCoverImageView;
- (void)prepareChooseDefinitionView;
- (void)prepareToDealloc;
/// Call when some action button Pressed
/// \param button action Button
///
- (void)onButtonPressed:(UIButton * _Nonnull)button;
/// Call when the tap gesture tapped
/// \param gesture tap gesture
///
- (void)onTapGestureTapped:(UITapGestureRecognizer * _Nonnull)gesture;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Add Customize functions here
- (void)customizeUIComponents;
@end


@interface BMPlayerControlView (SWIFT_EXTENSION(MuviSDK))
@end


@class AVPlayerItem;
@class AVURLAsset;

SWIFT_CLASS("_TtC7MuviSDK17BMPlayerLayerView")
@interface BMPlayerLayerView : UIView
/// 视频跳转秒数置0
@property (nonatomic) NSInteger seekTime;
/// 播放属性
@property (nonatomic, strong) AVPlayerItem * _Nullable playerItem;
/// 播放属性
@property (nonatomic, strong) AVPlayer * _Nullable player;
@property (nonatomic, copy) NSString * _Nonnull videoGravity;
@property (nonatomic) BOOL isPlaying;
- (void)playURLWithUrl:(NSURL * _Nonnull)url;
- (void)playAssetWithAsset:(AVURLAsset * _Nonnull)asset;
- (void)play;
- (void)pause;
- (void)layoutSubviews;
- (void)resetPlayer;
- (void)prepareToDeinit;
- (void)onTimeSliderBegan;
- (void)seekTo:(NSTimeInterval)secounds completion:(void (^ _Nullable)(void))completion;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MuviSDK12BMTimeSlider")
@interface BMTimeSlider : UISlider
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MuviSDK16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
@property (nonatomic, copy) NSString * _Nullable label;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(MuviSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MZDownloadModel;
@protocol MZDownloadManagerDelegate;

SWIFT_CLASS("_TtC7MuviSDK17MZDownloadManager")
@interface MZDownloadManager : NSObject
@property (nonatomic, copy) NSArray<MZDownloadModel *> * _Nonnull downloadingArray;
- (nonnull instancetype)initWithSession:(NSString * _Nonnull)sessionIdentifer delegate:(id <MZDownloadManagerDelegate> _Nonnull)delegate;
- (nonnull instancetype)initWithSession:(NSString * _Nonnull)sessionIdentifer delegate:(id <MZDownloadManagerDelegate> _Nonnull)delegate completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MZDownloadManager (SWIFT_EXTENSION(MuviSDK))
@end

@class NSURLSession;

@interface MZDownloadManager (SWIFT_EXTENSION(MuviSDK)) <NSURLSessionDelegate>
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end


@interface MZDownloadManager (SWIFT_EXTENSION(MuviSDK))
- (void)addDownloadTask:(NSString * _Nonnull)fileName fileURL:(NSString * _Nonnull)fileURL destinationPath:(NSString * _Nonnull)destinationPath;
- (void)addDownloadTask:(NSString * _Nonnull)fileName fileURL:(NSString * _Nonnull)fileURL;
- (void)pauseDownloadTaskAtIndex:(NSInteger)index;
- (void)resumeDownloadTaskAtIndex:(NSInteger)index;
- (void)retryDownloadTaskAtIndex:(NSInteger)index;
- (void)cancelTaskAtIndex:(NSInteger)index;
- (void)presentNotificationForDownload:(NSString * _Nonnull)notifAction notifBody:(NSString * _Nonnull)notifBody;
@end

@class NSError;

SWIFT_PROTOCOL("_TtP7MuviSDK25MZDownloadManagerDelegate_")
@protocol MZDownloadManagerDelegate
/// A delegate method called each time whenever any download task’s progress is updated
- (void)downloadRequestDidUpdateProgress:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called when interrupted tasks are repopulated
- (void)downloadRequestDidPopulatedInterruptedTasks:(NSArray<MZDownloadModel *> * _Nonnull)downloadModel;
@optional
/// A delegate method called each time whenever new download task is start downloading
- (void)downloadRequestStarted:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever running download task is paused. If task is already paused the action will be ignored
- (void)downloadRequestDidPaused:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
- (void)downloadRequestDidResumed:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever any download task is resumed. If task is already downloading the action will be ignored
- (void)downloadRequestDidRetry:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever any download task is cancelled by the user
- (void)downloadRequestCanceled:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever any download task is finished successfully
- (void)downloadRequestFinished:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever any download task is failed due to any reason
- (void)downloadRequestDidFailedWithError:(NSError * _Nonnull)error downloadModel:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
/// A delegate method called each time whenever specified destination does not exists. It will be called on the session queue. It provides the opportunity to handle error appropriately
- (void)downloadRequestDestinationDoestNotExists:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index location:(NSURL * _Nonnull)location;
@end

@class NSURLSessionDownloadTask;

SWIFT_CLASS("_TtC7MuviSDK15MZDownloadModel")
@interface MZDownloadModel : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified fileName;
@property (nonatomic, copy) NSString * _Null_unspecified fileURL;
@property (nonatomic, copy) NSString * _Nonnull status;
@property (nonatomic) float progress;
@property (nonatomic, strong) NSURLSessionDownloadTask * _Nullable task;
@property (nonatomic, copy) NSDate * _Nullable startTime;
@property (nonatomic, readonly, copy) NSString * _Nonnull destinationPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

SWIFT_CLASS("_TtC7MuviSDK9MZUtility")
@interface MZUtility : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DownloadCompletedNotif;)
+ (NSString * _Nonnull)DownloadCompletedNotif SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull baseFilePath;)
+ (NSString * _Nonnull)baseFilePath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getUniqueFileNameWithPath:(NSString * _Nonnull)filePath SWIFT_WARN_UNUSED_RESULT;
+ (float)calculateFileSizeInUnit:(int64_t)contentLength SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)calculateUnit:(int64_t)contentLength SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)addSkipBackupAttributeToItemAtURL:(NSString * _Nonnull)docDirectoryPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// Activity indicator view with nice animations
SWIFT_CLASS("_TtC7MuviSDK23NVActivityIndicatorView")
@interface NVActivityIndicatorView : UIView
/// Default color. Default value is UIColor.whiteColor().
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull DEFAULT_COLOR;)
+ (UIColor * _Nonnull)DEFAULT_COLOR SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_COLOR:(UIColor * _Nonnull)value;
/// Default padding. Default value is 0.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGFloat DEFAULT_PADDING;)
+ (CGFloat)DEFAULT_PADDING SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_PADDING:(CGFloat)value;
/// Default size of activity indicator view in UI blocker. Default value is 60x60.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) CGSize DEFAULT_BLOCKER_SIZE;)
+ (CGSize)DEFAULT_BLOCKER_SIZE SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_SIZE:(CGSize)value;
/// Default display time threshold to actually display UI blocker. Default value is 0 ms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD;)
+ (NSInteger)DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD:(NSInteger)value;
/// Default minimum display time of UI blocker. Default value is 0 ms.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME;)
+ (NSInteger)DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME SWIFT_WARN_UNUSED_RESULT;
+ (void)setDEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME:(NSInteger)value;
/// Color of activity indicator view.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Padding of activity indicator view.
@property (nonatomic) CGFloat padding;
/// Current status of animation, read-only.
@property (nonatomic, readonly) BOOL animating;
/// Returns an object initialized from data in a given unarchiver.
/// self, initialized using the data in decoder.
/// \param decoder an unarchiver object.
///
///
/// returns:
/// self, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns the natural size for the receiving view, considering only properties of the view itself.
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
///
/// returns:
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Start animating.
- (void)startAnimating;
/// Stop animating.
- (void)stopAnimating;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSURLConnection;
@class NSURLResponse;
@class NSBundle;

SWIFT_CLASS("_TtC7MuviSDK20PlayerViewController")
@interface PlayerViewController : UIViewController <NSURLConnectionDataDelegate, NSURLConnectionDelegate, UIGestureRecognizerDelegate>
@property (nonatomic, copy) NSString * _Null_unspecified authToken;
@property (nonatomic, copy) NSString * _Null_unspecified content_uniq_id;
@property (nonatomic, copy) NSString * _Null_unspecified stream_uniq_id;
@property (nonatomic, copy) NSString * _Null_unspecified user_id;
@property (nonatomic, copy) NSString * _Null_unspecified internet_speed;
@property (nonatomic, copy) NSString * _Nonnull season_id;
@property (nonatomic, copy) NSString * _Null_unspecified appBaseUrl;
@property (nonatomic, copy) NSString * _Null_unspecified apiName;
@property (nonatomic) BOOL isAirPlayEnableDisable;
@property (nonatomic) BOOL isSubtitleEnableDisable;
- (void)viewDidLoad;
- (void)connection:(NSURLConnection * _Nonnull)connection didReceiveResponse:(NSURLResponse * _Nonnull)response;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UNUserNotificationCenter;
@class UNNotificationResponse;
@class UNNotification;

@interface PlayerViewController (SWIFT_EXTENSION(MuviSDK)) <UNUserNotificationCenterDelegate>
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
@end


@interface PlayerViewController (SWIFT_EXTENSION(MuviSDK))
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player playerIsPlaying:(BOOL)playing;
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player playTimeDidChange:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime;
- (void)bmPlayerWithPlayer:(BMPlayer * _Nonnull)player loadedTimeDidChange:(NSTimeInterval)loadedDuration totalDuration:(NSTimeInterval)totalDuration;
@end


@interface PlayerViewController (SWIFT_EXTENSION(MuviSDK)) <MZDownloadManagerDelegate>
- (void)downloadRequestStarted:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestDidPopulatedInterruptedTasks:(NSArray<MZDownloadModel *> * _Nonnull)downloadModels;
- (void)downloadRequestDidUpdateProgress:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestDidPaused:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestDidResumed:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestCanceled:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestFinished:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestDidFailedWithError:(NSError * _Nonnull)error downloadModel:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index;
- (void)downloadRequestDestinationDoestNotExists:(MZDownloadModel * _Nonnull)downloadModel index:(NSInteger)index location:(NSURL * _Nonnull)location;
@end


@interface UILayoutGuide (SWIFT_EXTENSION(MuviSDK))
@end


@interface UIView (SWIFT_EXTENSION(MuviSDK))
@end


@interface UIView (SWIFT_EXTENSION(MuviSDK))
- (void)snp_removeConstraints;
@end

#pragma clang diagnostic pop
